{"version":3,"sources":["Components/Card/Card.module.css","Components/Hand/Hand.module.css","Components/Card/Card.js","Components/Hand/Hand.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","state","center","focused","ref","React","createRef","focus","rect","current","getBoundingClientRect","setState","left","width","unfocus","style","this","Object","assign","position","parseFloat","props","cardWidth","transformOrigin","transform","transition","zIndex","pointerEvents","onMouseEnter","onMouseLeave","className","styles","opacity","num","Component","Hand","calculateColumn","n","start","getGrid","cardOverflow","cardGrid","calculateRotate","middle","cards","length","degree","Math","sign","trunc","calculateOrigin","widthRate","map","card","i","key","gridColumn","App","cardCount","Array","fill","k","onClick","display","justifyContent","bottom","minWidth","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d404a0b1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Card\":\"Card_Card__1a3PF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Hand\":\"Hand_Hand__2DWBX\"};","import React from 'react'\r\nimport styles from './Card.module.css'\r\n\r\nclass Card extends React.Component {\r\n  state = {\r\n    center: 0,\r\n    focused: false\r\n  }\r\n\r\n  ref = React.createRef()\r\n\r\n  focus = () => {\r\n    const rect = this.ref.current.getBoundingClientRect()\r\n    this.setState({\r\n      focused: true,\r\n      center: rect.left + rect.width / 2\r\n    })\r\n  }\r\n\r\n  unfocus = () => {\r\n    this.setState({ focused: false })\r\n  }\r\n\r\n  render () {\r\n    const style = { }\r\n    if (this.state.focused) {\r\n      Object.assign(style, {\r\n        position: 'absolute',\r\n        left: this.state.center - parseFloat(this.props.cardWidth) / 2,\r\n        width: this.props.cardWidth,\r\n        transformOrigin: 'center',\r\n        transform: 'scale(120%) translateY(-60px)',\r\n        transition: 'none',\r\n        zIndex: 2,\r\n        pointerEvents: 'none'\r\n      })\r\n    }\r\n    return (\r\n      <>\r\n        <div ref={this.ref} onMouseEnter={this.focus} onMouseLeave={this.unfocus} className={styles.Card} style={{ ...this.props.style, opacity: this.state.focused ? 0 : 1 }}>\r\n          {this.props.num}. Card\r\n        </div>\r\n        {this.state.focused &&\r\n        <div className={styles.Card} style={style}>\r\n          Focused {this.props.num}. Card\r\n        </div>\r\n        }\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Card\r\n","import React from 'react'\r\nimport Card from '../Card/Card'\r\nimport styles from './Hand.module.css'\r\n\r\nclass Hand extends React.Component {\r\n  getGrid () {\r\n    const cardGrid = 6\r\n    let cardOverflow\r\n    switch (this.props.cards.length) {\r\n      case 1: case 2:\r\n        cardOverflow = 7\r\n        break\r\n      case 3: case 4:\r\n        cardOverflow = 4\r\n        break\r\n      case 5: case 6:\r\n        cardOverflow = 3\r\n        break\r\n      default: cardOverflow = 2\r\n    }\r\n    return { cardGrid, cardOverflow }\r\n  }\r\n\r\n  calculateColumn = n => {\r\n    const start = this.getGrid().cardOverflow * n + 1\r\n    return `${start} / ${start + this.getGrid().cardGrid}`\r\n  }\r\n\r\n  calculateRotate = n => {\r\n    const middle = (this.props.cards.length + 1) / 2\r\n    if (n === middle || this.getGrid().cardGrid <= this.getGrid().cardOverflow) return 'rotate(0)'\r\n    const degree = Math.sign(n - middle) * 2 + Math.trunc(n - middle) * 3\r\n    return `rotate(${degree}deg)`\r\n  }\r\n\r\n  calculateOrigin = n => {\r\n    const middle = (this.props.cards.length + 1) / 2\r\n    if (n === middle) return 'center'\r\n    return n - middle > 0 ? 'bottom left' : 'bottom right'\r\n  }\r\n\r\n  render () {\r\n    const widthRate = 1 + (this.props.cards.length - 1) * this.getGrid().cardOverflow / this.getGrid().cardGrid\r\n    return (\r\n      <div className={styles.Hand} style={{ width: `calc(${this.props.cardWidth} * ${widthRate})` }}>\r\n        {\r\n          this.props.cards.map((card, i) =>\r\n            <Card key={card.key} num={i + 1} cardWidth={this.props.cardWidth} style={{\r\n              gridColumn: this.calculateColumn(i),\r\n              transform: this.calculateRotate(i + 1),\r\n              transformOrigin: this.calculateOrigin(i + 1)\r\n            }}/>\r\n          )\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Hand\r\n","import React from 'react'\nimport './App.css'\nimport Hand from './Components/Hand/Hand'\n\nclass App extends React.Component {\n  state = {\n    cardCount: 6\n  }\n\n  render () {\n    const cards = new Array(this.state.cardCount).fill().map((k, i) => ({ key: i }))\n    return (\n      <>\n        <button onClick={() => { this.setState(state => ({ cardCount: state.cardCount + 1 })) }}>+</button>\n        <button onClick={() => { this.setState(state => ({ cardCount: state.cardCount - 1 })) }}>-</button>\n        <div style={{ display: 'flex', justifyContent: 'center', position: 'absolute', bottom: -20, minWidth: '100%' }}>\n          <Hand cardWidth=\"200px\" cards={cards}/>\n        </div>\n      </>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './bootstrap-reboot.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\nserviceWorker.unregister()\n"],"sourceRoot":""}